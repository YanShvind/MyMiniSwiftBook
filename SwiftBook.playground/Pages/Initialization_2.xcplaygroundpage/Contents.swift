// Скутаренко

/*
 В некоторых ситуациях бывает необходимо определить объектный тип, создание экземпляра которого может закончиться неудачей, вызванной некорректным набором внешних параметров, отсутствием какого-либо внешнего ресурса или иным обстоятельством. Для этой цели служат проваливающиеся (failable) ини- циализаторы. Они способны возвращать nil при попытке создания экземпляра. И это их основное предназначение.
 */

enum Color: Int{
   case Black, White
    
    init?(rawValue: Int) {
        switch rawValue{
        case 0: self = .Black
        case 1: self = .White
        default: return nil
        }
    }
}
let a = Color(rawValue: 1)

class Rectangle {
    var height: Int
    var weight: Int
    init?(height h: Int, weight w: Int) {
        self.height = h
        self.weight = w
        if !(h > 0 && w > 0) {
            return nil
        }
    }
}
var rectangle = Rectangle(height: 56, weight: -32) // возвращает nil

// Обязательный (required) инициализатор — это инициализатор, который обяза- тельно должен быть определен во всех подклассах данного класса.

// Деинициализаторы
/*
 Деинициализатор (деструктор) — это специальный метод, который автоматиче- ски вызывается во время уничтожения экземпляра класса. Вы не можете вызвать деинициализатор самостоятельно. Один класс может иметь не более одного де- инициализатора.
 
    deinit {
         // тело деинициализатора
    }
 */
//Деинициализаторы являются отличительной особенностью классов и недо- ступны для структур.

class SuperClass {
    init?(isNil: Bool) {
        if isNil == true {
            return nil
} else {
    print("Экземпляр создан")
    }
}
deinit {
    print("Деинициализатор суперкласса")
    }
}

class SubClass: SuperClass {
deinit {
    print("Деинициализатор подкласса")
    }
}

var obj = SubClass(isNil: false)
obj = nil // удаляем объект и вызываем deinit
